% Compute the Feigenbaum delta
% Store approximate values in the row vector delta for assessment, where length(delta)= num_doublings and 
% delta(2:num_doublings) are computed from the algorithm described in Lectures 21-23.
num_doublings=11; delta=zeros(1,num_doublings); delta(1)=5;
% Write your code here
m = zeros(1,num_doublings);
m(1) = 2;
m(2) = 1 + sqrt(5);
for n = 2:num_doublings
    m(n+1) = m(n) + ( m(n) - m(n-1) ) / delta(n-1);
    mu(1) = m(n+1);
    for j = 1:6
        x(1) = 1/2;
        xp(1) = 0;
        for i = 1:2^n
            x(i+1) = mu(j) * x(i) * ( 1 - x(i) );
            xp(i+1) = x(i) * ( 1 - x(i) ) + mu(j) * xp(i) * ( 1 - 2 * x(i) );
        end
        mu(j+1) = mu(j) - (x(end) - 1/2) / xp(end);
    end
    m(n+1) = mu(end);
    delta(n) = ( m(n) - m(n-1) ) / ( m(n+1) - m(n) );
end
% Output your results
fprintf('n        delta(n)\n');
for n=1:num_doublings
    fprintf('%2g %18.15f\n',n,delta(n));
end