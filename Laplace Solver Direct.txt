%% Define the rectangle and grid parameters %%%%%
Lx = 1; Ly = 1; % rectangle dimensions
Nx = 100; Ny = 100; % number of intervals
nx = Nx+1; ny = Ny +1; % Number of gridpoints including boundaries
dx = Lx/Nx; dy = Ly/Ny; % grid size in x,y directions
x = (0:Nx)*dx; y = (0:Ny)*dy; % x,y value on the grid
%% Define the indices associated with the boundaries %%%
% boundary_index = [bottom, left, top, right]
boundary_index = [          1:nx,     1:nx:1+(ny-1)*nx,...
                  1+(ny-1)*nx:nx*ny, nx:nx:nx*ny        ];
%% Set up Matrix %%%
diagonals = [4*ones(nx*ny,1), -ones(nx*ny,4)];
A = spdiags(diagonals,[0 -1 1 -nx nx], nx*ny, nx*ny); % use sparse matrices
% [0 -1 1 -nx nx] for where goes which diagonal. 0 is main,
%                                               -1 is above the main
%                                                1 is below the main
%                                               and so on
I = speye(nx*ny);
A(boundary_index,:) = I(boundary_index,:);
%% set up right-hand side
b = zeros(nx,ny);
b(:,1) = 0;             % bottom
b(1,:) = 0;             % left
b(:,ny) = 4*x.*(1-x);   % top
b(nx,:) = 0;            % right
b = reshape(b,nx*ny,1); % column vector using natural ordering
%% Solve the Laplace equation using Gaussian elimination
Phi = A\b;
Phi = reshape(Phi,nx,ny); % make matrix
%% Graphics
[X,Y] = meshgrid(x,y);
v = [0.8 0.6 0.4 0.2 0.1 0.05 0.01];
contour(X,Y,Phi',v,'ShowText','on'); %requires transpose
axis equal;
set(gca, 'YTick', [0 0.2 0.4 0.6 0.8 1]);
set(gca, 'XTick', [0 0.2 0.4 0.6 0.8 1]);
xlabel('$x$','Interpreter', 'latex','FontSize', 14);
ylabel('$y$','Interpreter', 'latex','FontSize', 14);
title('Laplace equation Solution','Interpreter','latex','FontSize',16);